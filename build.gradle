import com.github.spotbugs.SpotBugsTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.2'
        classpath 'org.ajoberstar:gradle-git:1.4.2'

    }
}

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'jacoco'
    id 'com.github.spotbugs' version '1.6.5'
    id 'com.github.psxpaul.execfork' version '0.1.8'
    id 'com.jfrog.artifactory' version '4.8.1'
    id 'org.ajoberstar.grgit' version '3.0.0'
}

description = 'fwmt-census-job-service'

version = '3.0.0-SNAPSHOT'

mainClassName = 'uk.gov.ons.fwmt.census.jobservice.ApplicationConfig'

group = 'uk.gov.ons.fwmt'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    if (!project.hasProperty('omitSDCArtifactory')) {
        maven { url 'http://artifactory-sdc.onsdigital.uk/artifactory/libs-release' }
        maven { url 'http://artifactory-sdc.onsdigital.uk/artifactory/libs-snapshot' }
    }
    maven { url 'https://oss.sonatype.org/content/repositories/libs-snapshot' }
    maven { url 'http://repo.maven.apache.org/maven2' }
}

configurations {
    jaxb
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                arg(value: '-wsdl')
                produces(dir: sourcesDir, includes: '**/*.java')
                schema(dir: schema, includes: '**/*.wsdl')
            }

            javac(destdir: classesDir, source: sourceCompatibility, target: targetCompatibility,
                    debug: true, debugLevel: 'lines,vars,source',
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: '**/*.java')
                include(name: '*.java')
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: '**/*.java')
                }
            }
        }
    }
}

dependencies {
    compile("uk.gov.ons.fwmt:fwmt-gateway-common:0.0.15-RELEASE")

	jaxb("javax.xml.bind:jaxb-api:2.3.0")
	jaxb("com.sun.xml.bind:jaxb-core:2.3.0.1")
	jaxb("com.sun.xml.bind:jaxb-impl:2.3.1")
	jaxb("com.sun.xml.bind:jaxb-xjc:2.3.1")
	jaxb("javax.activation:activation:1.1.1")
	compile("javax.xml.bind:jaxb-api:2.3.0")
    compile(files((String) genJaxb.classesDir).builtBy(genJaxb))

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-aop")
    compile("org.springframework.retry:spring-retry") 

    compile("org.springframework:spring-aop")
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector")
    compile("org.springframework.cloud:spring-cloud-spring-service-connector") {
        exclude(module: "log4j")
    }
    compile("org.springframework.retry:spring-retry")

    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile group: 'com.github.joschi.jackson', name: 'jackson-datatype-threetenbp', version: '2.6.4'
    
    // this dependency is required to fix spring-boot-starter-web-services (and saaj-impl), which depend on an old non-existent version
    compile("org.jvnet.mimepull:mimepull")

    compile("org.aspectj:aspectjweaver")

    compile("org.apache.commons:commons-csv:1.6")
    compile("org.apache.commons:commons-lang3")
    compile("org.apache.httpcomponents:httpclient") {
        exclude(module: 'commons-logging')
    }

    compile("org.jsoup:jsoup:1.11.3")

    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("io.springfox:springfox-swagger-ui:2.9.2")

    compile("org.yaml:snakeyaml")
    compile("org.json:json:20180813")

    compile("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testCompile("org.junit.jupiter:junit-jupiter-params")
    testCompile("org.junit.jupiter:junit-jupiter-engine")
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "android-json"
        exclude module: "junit"
    }
    testCompile("org.apache.commons:commons-lang3")

    testCompile("org.mockito:mockito-core")
    testCompile("org.mockito:mockito-junit-jupiter")
    testCompile("org.powermock:powermock-core:1.7.4")
    testCompile("org.powermock:powermock-api-mockito2:1.7.4")
    testCompile("org.powermock:powermock-module-junit4:1.7.4")

    testCompile("junit:junit")

/*
    integrationTestCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    integrationTestCompile group: 'org.assertj', name: 'assertj-core', version: '3.0.0'
    integrationTestCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
*/

 /*   integrationTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    integrationTestCompile("org.assertj:assertj-core:3.0.0")
    integrationTestCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "android-json"
        exclude module: "junit"
    }
    integrationTestRuntime("uk.gov.ons.fwmt:fwmt-service-mocks")

    integrationTestCompile("org.projectlombok:lombok")
    integrationTestAnnotationProcessor("org.projectlombok:lombok")
*/
}

bootJar {
    group = 'uk.gov.ons.fwmt'
    baseName = 'fwmt-census-job-service'
    manifest {
    }
    version = version
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}


artifactory {
    contextUrl = System.getenv('ARTIFACTORY_URL')
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = System.getenv('ARTIFACTORY_USERNAME')
            password = System.getenv('ARTIFACTORY_PASSWORD')
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'fwmt-census-job-service'
            version = version

            from components.java
        }
    }
}

artifactoryPublish {
    publications('maven')
}

task integrationTest(type: Test) {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// task runMocks(type: com.github.psxpaul.task.JavaExecFork) {
//     String mockJarPath = configurations.integrationTestRuntime.find { it.name.startsWith('fwmt-service-mocks') }
//     classpath = sourceSets.main.runtimeClasspath
//     main = '-jar'
//     args = [mockJarPath]
//     jvmArgs = ['-Xmx500m']
//     workingDir = "$buildDir"
//     standardOutput = "$buildDir/fwmt-service-mocks.log"
//     errorOutput = "$buildDir/fwmt-service-mocks-errors.log"
//     stopAfter = integrationTest
//     waitForPort = 9099
//     waitForOutput = 'Started Application'
// }
// integrationTest.dependsOn runMocks

processResources {
    filter ReplaceTokens, tokens: [
            'project.artifactId': 'name',
            'project.version'   : 'version',
            'scm.url'           : 'url',
            'buildNumber'       : 'buildnumber',
            'scmBranch'         : 'branch',
            'timestamp'         : 'timestamp',
    ]
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/legacy_ingest/*',
                    '**/dto/*',
                    '**/data/tm/*',
                    '**/config/*',
                    '**/CSVParseFinalResult.java',
                    '**/ApplicationConfig.java',
                    '**/WebConfig.java'
            ])
        })
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

check.dependsOn jacocoTestReport

spotbugs {
    toolVersion = '3.1.9'
}

//findbugs {
//    ignoreFailures = false
//    sourceSets = [sourceSets.main]
//    reportsDir = file('$project.buildDir/reports/findbugs')
//    effort = 'max'
//}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
